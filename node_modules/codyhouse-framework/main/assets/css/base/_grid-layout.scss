:root {
  --max-w-xxxxs: 20rem;  // ~320px
  --max-w-xxxs:  26rem;  // ~416px
  --max-w-xxs:   32rem;  // ~512px
  --max-w-xs:    38rem;  // ~608px
  --max-w-sm:    48rem;  // ~768px
  --max-w-md:    64rem;  // ~1024px
  --max-w-lg:    80rem;  // ~1280px
  --max-w-xl:    90rem;  // ~1440px
  --max-w-xxl:   100rem; // ~1600px
  --max-w-xxxl:  120rem; // ~1920px
  --max-w-xxxxl: 150rem; // ~2400px
}

// classes used to center content on x-axis and set content max width
.container {
  width: calc(100% - 2*var(--component-padding));
  margin-left: auto;
  margin-right: auto;
}

.max-width-xxxxs { max-width: var(--max-w-xxxxs); }
.max-width-xxxs  { max-width: var(--max-w-xxxs); }
.max-width-xxs   { max-width: var(--max-w-xxs); }
.max-width-xs    { max-width: var(--max-w-xs); }
.max-width-sm    { max-width: var(--max-w-sm); }
.max-width-md    { max-width: var(--max-w-md); }
.max-width-lg    { max-width: var(--max-w-lg); }
.max-width-xl    { max-width: var(--max-w-xl); }
.max-width-xxl   { max-width: var(--max-w-xxl); }
.max-width-xxxl  { max-width: var(--max-w-xxxl); }
.max-width-xxxxl { max-width: var(--max-w-xxxxl); }

// alt approach - max-width is updated at specific breakpoints
.max-width-adaptive-sm,
.max-width-adaptive-md,
.max-width-adaptive,
.max-width-adaptive-lg,
.max-width-adaptive-xl {
  max-width: var(--max-w-xs);
}

@include breakpoint(md) {
  .max-width-adaptive-sm {
    max-width: var(--max-w-sm);
  }

  .max-width-adaptive-md,
  .max-width-adaptive,
  .max-width-adaptive-lg,
  .max-width-adaptive-xl {
    max-width: var(--max-w-md);
  }
}

@include breakpoint(xl) {
  .max-width-adaptive,
  .max-width-adaptive-lg {
    max-width: var(--max-w-lg);
  }

  .max-width-adaptive-xl {
    max-width: var(--max-w-xl);
  }
}

// --------------------------------

// Grid system

// --------------------------------

$grid-columns: 12 !default;

.grid {
  display: flex;
  flex-wrap: wrap;

  > * {
    flex-basis: 100%;
  }
}

@function round-width ($i) {
  //function used to round width to a number with 2 decimal places - used for IE fallback
  $width : floor(100% * $i * 100/ $grid-columns) / 100;
  @return $width;
}

@mixin autoSizedColumn {
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

.col { // auto-sized column
  @include autoSizedColumn;
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    flex-basis: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
    max-width: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em)); 
  }
}

@include breakpoint(xs) {
  .col\@xs { // auto-sized column
    @include autoSizedColumn;
  }

  @for $i from 1 through $grid-columns {
    .col-#{$i}\@xs {
      flex-basis: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
      max-width: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em)); 
    }
  }
}

@include breakpoint(sm) {
  .col\@sm { // auto-sized column
    @include autoSizedColumn;
  }

  @for $i from 1 through $grid-columns {
    .col-#{$i}\@sm  {
      flex-basis: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
      max-width: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em)); 
    }
  }
}

@include breakpoint(md) {
  .col\@md { // auto-sized column
    @include autoSizedColumn;
  }

  @for $i from 1 through $grid-columns {
    .col-#{$i}\@md {
      flex-basis: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
      max-width: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em)); 
    }
  }
}

@include breakpoint(lg) {
  .col\@lg { // auto-sized column
    @include autoSizedColumn;
  }

  @for $i from 1 through $grid-columns {
    .col-#{$i}\@lg {
      flex-basis: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
      max-width: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
    }
  }
}

@include breakpoint(xl) {
  .col\@xl { // auto-sized column
    @include autoSizedColumn;
  }

  @for $i from 1 through $grid-columns {
    .col-#{$i}\@xl {
      flex-basis: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
      max-width: calc( #{round-width($i)} - 0.01px - var(--grid-gap, 1em));
    }
  }
}

// --------------------------------

// CSS Grid Layout fallback

// --------------------------------

@mixin gridFallback($gap: null) {
  display: flex;
  flex-wrap: wrap;
  @if( $gap == null ) {
    $gap: var(--space-md);
  }

  margin: calc(#{$gap} * -1) 0 0 calc(#{$gap} * -1);

  > * {
    padding: #{$gap} 0 0 #{$gap};
    background-clip: content-box;
  }

  @supports (grid-area: auto) {
    margin: 0;

    > * {
      padding: 0;
      max-width: none!important;
    }
  }
}

@mixin column($width) {
  @if unit($width) != '%' {
    $width: $width * 100%;
  }
  flex-basis: #{$width};
  max-width: #{$width};
}